{
  "version": 3,
  "sources": ["../../binary-search-bounds/search-bounds.js", "../../two-product/two-product.js", "../../robust-sum/robust-sum.js", "../../two-sum/two-sum.js", "../../robust-scale/robust-scale.js", "../../robust-subtract/robust-diff.js", "../../robust-orientation/orientation.js", "../../cdt2d/lib/monotone.js", "../../cdt2d/lib/triangulation.js", "../../robust-in-sphere/in-sphere.js", "../../cdt2d/lib/delaunay.js", "../../cdt2d/lib/filter.js", "../../cdt2d/cdt2d.js", "dep:cdt2d"],
  "sourcesContent": ["\"use strict\"\n\n// (a, y, c, l, h) = (array, y[, cmp, lo, hi])\n\nfunction ge(a, y, c, l, h) {\n  var i = h + 1;\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p >= 0) { i = m; h = m - 1 } else { l = m + 1 }\n  }\n  return i;\n};\n\nfunction gt(a, y, c, l, h) {\n  var i = h + 1;\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p > 0) { i = m; h = m - 1 } else { l = m + 1 }\n  }\n  return i;\n};\n\nfunction lt(a, y, c, l, h) {\n  var i = l - 1;\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p < 0) { i = m; l = m + 1 } else { h = m - 1 }\n  }\n  return i;\n};\n\nfunction le(a, y, c, l, h) {\n  var i = l - 1;\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p <= 0) { i = m; l = m + 1 } else { h = m - 1 }\n  }\n  return i;\n};\n\nfunction eq(a, y, c, l, h) {\n  while (l <= h) {\n    var m = (l + h) >>> 1, x = a[m];\n    var p = (c !== undefined) ? c(x, y) : (x - y);\n    if (p === 0) { return m }\n    if (p <= 0) { l = m + 1 } else { h = m - 1 }\n  }\n  return -1;\n};\n\nfunction norm(a, y, c, l, h, f) {\n  if (typeof c === 'function') {\n    return f(a, y, c, (l === undefined) ? 0 : l | 0, (h === undefined) ? a.length - 1 : h | 0);\n  }\n  return f(a, y, undefined, (c === undefined) ? 0 : c | 0, (l === undefined) ? a.length - 1 : l | 0);\n}\n\nmodule.exports = {\n  ge: function(a, y, c, l, h) { return norm(a, y, c, l, h, ge)},\n  gt: function(a, y, c, l, h) { return norm(a, y, c, l, h, gt)},\n  lt: function(a, y, c, l, h) { return norm(a, y, c, l, h, lt)},\n  le: function(a, y, c, l, h) { return norm(a, y, c, l, h, le)},\n  eq: function(a, y, c, l, h) { return norm(a, y, c, l, h, eq)}\n}\n", "\"use strict\"\n\nmodule.exports = twoProduct\n\nvar SPLITTER = +(Math.pow(2, 27) + 1.0)\n\nfunction twoProduct(a, b, result) {\n  var x = a * b\n\n  var c = SPLITTER * a\n  var abig = c - a\n  var ahi = c - abig\n  var alo = a - ahi\n\n  var d = SPLITTER * b\n  var bbig = d - b\n  var bhi = d - bbig\n  var blo = b - bhi\n\n  var err1 = x - (ahi * bhi)\n  var err2 = err1 - (alo * bhi)\n  var err3 = err2 - (ahi * blo)\n\n  var y = alo * blo - err3\n\n  if(result) {\n    result[0] = y\n    result[1] = x\n    return result\n  }\n\n  return [ y, x ]\n}", "\"use strict\"\n\nmodule.exports = linearExpansionSum\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction linearExpansionSum(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}", "\"use strict\"\n\nmodule.exports = fastTwoSum\n\nfunction fastTwoSum(a, b, result) {\n\tvar x = a + b\n\tvar bv = x - a\n\tvar av = x - bv\n\tvar br = b - bv\n\tvar ar = a - av\n\tif(result) {\n\t\tresult[0] = ar + br\n\t\tresult[1] = x\n\t\treturn result\n\t}\n\treturn [ar+br, x]\n}", "\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar twoSum = require(\"two-sum\")\n\nmodule.exports = scaleLinearExpansion\n\nfunction scaleLinearExpansion(e, scale) {\n  var n = e.length\n  if(n === 1) {\n    var ts = twoProduct(e[0], scale)\n    if(ts[0]) {\n      return ts\n    }\n    return [ ts[1] ]\n  }\n  var g = new Array(2 * n)\n  var q = [0.1, 0.1]\n  var t = [0.1, 0.1]\n  var count = 0\n  twoProduct(e[0], scale, q)\n  if(q[0]) {\n    g[count++] = q[0]\n  }\n  for(var i=1; i<n; ++i) {\n    twoProduct(e[i], scale, t)\n    var pq = q[1]\n    twoSum(pq, t[0], q)\n    if(q[0]) {\n      g[count++] = q[0]\n    }\n    var a = t[1]\n    var b = q[1]\n    var x = a + b\n    var bv = x - a\n    var y = b - bv\n    q[1] = x\n    if(y) {\n      g[count++] = y\n    }\n  }\n  if(q[1]) {\n    g[count++] = q[1]\n  }\n  if(count === 0) {\n    g[count++] = 0.0\n  }\n  g.length = count\n  return g\n}", "\"use strict\"\n\nmodule.exports = robustSubtract\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction robustSubtract(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], -f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = -f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = -f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}", "\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar robustSum = require(\"robust-sum\")\nvar robustScale = require(\"robust-scale\")\nvar robustSubtract = require(\"robust-subtract\")\n\nvar NUM_EXPAND = 5\n\nvar EPSILON     = 1.1102230246251565e-16\nvar ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON\nvar ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON\n\nfunction orientation_3(sum, prod, scale, sub) {\n  return function orientation3Exact(m0, m1, m2) {\n    var p = sum(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])))\n    var n = sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0]))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_4(sum, prod, scale, sub) {\n  return function orientation4Exact(m0, m1, m2, m3) {\n    var p = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))))\n    var n = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_5(sum, prod, scale, sub) {\n  return function orientation5Exact(m0, m1, m2, m3, m4) {\n    var p = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m1[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), -m2[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m3[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), -m4[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m1[3])))), sum(sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m3[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), -m4[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), m0[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m1[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m3[3])))))\n    var n = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m2[3])), sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), m3[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m4[3]))), sum(sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), -m1[3])), sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m4[3]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation(n) {\n  var fn =\n    n === 3 ? orientation_3 :\n    n === 4 ? orientation_4 : orientation_5\n\n  return fn(robustSum, twoProduct, robustScale, robustSubtract)\n}\n\nvar orientation3Exact = orientation(3)\nvar orientation4Exact = orientation(4)\n\nvar CACHED = [\n  function orientation0() { return 0 },\n  function orientation1() { return 0 },\n  function orientation2(a, b) {\n    return b[0] - a[0]\n  },\n  function orientation3(a, b, c) {\n    var l = (a[1] - c[1]) * (b[0] - c[0])\n    var r = (a[0] - c[0]) * (b[1] - c[1])\n    var det = l - r\n    var s\n    if(l > 0) {\n      if(r <= 0) {\n        return det\n      } else {\n        s = l + r\n      }\n    } else if(l < 0) {\n      if(r >= 0) {\n        return det\n      } else {\n        s = -(l + r)\n      }\n    } else {\n      return det\n    }\n    var tol = ERRBOUND3 * s\n    if(det >= tol || det <= -tol) {\n      return det\n    }\n    return orientation3Exact(a, b, c)\n  },\n  function orientation4(a,b,c,d) {\n    var adx = a[0] - d[0]\n    var bdx = b[0] - d[0]\n    var cdx = c[0] - d[0]\n    var ady = a[1] - d[1]\n    var bdy = b[1] - d[1]\n    var cdy = c[1] - d[1]\n    var adz = a[2] - d[2]\n    var bdz = b[2] - d[2]\n    var cdz = c[2] - d[2]\n    var bdxcdy = bdx * cdy\n    var cdxbdy = cdx * bdy\n    var cdxady = cdx * ady\n    var adxcdy = adx * cdy\n    var adxbdy = adx * bdy\n    var bdxady = bdx * ady\n    var det = adz * (bdxcdy - cdxbdy)\n            + bdz * (cdxady - adxcdy)\n            + cdz * (adxbdy - bdxady)\n    var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)\n                  + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)\n                  + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz)\n    var tol = ERRBOUND4 * permanent\n    if ((det > tol) || (-det > tol)) {\n      return det\n    }\n    return orientation4Exact(a,b,c,d)\n  }\n]\n\nfunction slowOrient(args) {\n  var proc = CACHED[args.length]\n  if(!proc) {\n    proc = CACHED[args.length] = orientation(args.length)\n  }\n  return proc.apply(undefined, args)\n}\n\nfunction proc (slow, o0, o1, o2, o3, o4, o5) {\n  return function getOrientation(a0, a1, a2, a3, a4) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return 0;\n      case 2:\n        return o2(a0, a1)\n      case 3:\n        return o3(a0, a1, a2)\n      case 4:\n        return o4(a0, a1, a2, a3)\n      case 5:\n        return o5(a0, a1, a2, a3, a4)\n    }\n\n    var s = new Array(arguments.length)\n    for (var i = 0; i < arguments.length; ++i) {\n      s[i] = arguments[i]\n    }\n    return slow(s)\n  }\n}\n\nfunction generateOrientationProc() {\n  while(CACHED.length <= NUM_EXPAND) {\n    CACHED.push(orientation(CACHED.length))\n  }\n  module.exports = proc.apply(undefined, [slowOrient].concat(CACHED))\n  for(var i=0; i<=NUM_EXPAND; ++i) {\n    module.exports[i] = CACHED[i]\n  }\n}\n\ngenerateOrientationProc()", "'use strict'\n\nvar bsearch = require('binary-search-bounds')\nvar orient = require('robust-orientation')[3]\n\nvar EVENT_POINT = 0\nvar EVENT_END   = 1\nvar EVENT_START = 2\n\nmodule.exports = monotoneTriangulate\n\n//A partial convex hull fragment, made of two unimonotone polygons\nfunction PartialHull(a, b, idx, lowerIds, upperIds) {\n  this.a = a\n  this.b = b\n  this.idx = idx\n  this.lowerIds = lowerIds\n  this.upperIds = upperIds\n}\n\n//An event in the sweep line procedure\nfunction Event(a, b, type, idx) {\n  this.a    = a\n  this.b    = b\n  this.type = type\n  this.idx  = idx\n}\n\n//This is used to compare events for the sweep line procedure\n// Points are:\n//  1. sorted lexicographically\n//  2. sorted by type  (point < end < start)\n//  3. segments sorted by winding order\n//  4. sorted by index\nfunction compareEvent(a, b) {\n  var d =\n    (a.a[0] - b.a[0]) ||\n    (a.a[1] - b.a[1]) ||\n    (a.type - b.type)\n  if(d) { return d }\n  if(a.type !== EVENT_POINT) {\n    d = orient(a.a, a.b, b.b)\n    if(d) { return d }\n  }\n  return a.idx - b.idx\n}\n\nfunction testPoint(hull, p) {\n  return orient(hull.a, hull.b, p)\n}\n\nfunction addPoint(cells, hulls, points, p, idx) {\n  var lo = bsearch.lt(hulls, p, testPoint)\n  var hi = bsearch.gt(hulls, p, testPoint)\n  for(var i=lo; i<hi; ++i) {\n    var hull = hulls[i]\n\n    //Insert p into lower hull\n    var lowerIds = hull.lowerIds\n    var m = lowerIds.length\n    while(m > 1 && orient(\n        points[lowerIds[m-2]],\n        points[lowerIds[m-1]],\n        p) > 0) {\n      cells.push(\n        [lowerIds[m-1],\n         lowerIds[m-2],\n         idx])\n      m -= 1\n    }\n    lowerIds.length = m\n    lowerIds.push(idx)\n\n    //Insert p into upper hull\n    var upperIds = hull.upperIds\n    var m = upperIds.length\n    while(m > 1 && orient(\n        points[upperIds[m-2]],\n        points[upperIds[m-1]],\n        p) < 0) {\n      cells.push(\n        [upperIds[m-2],\n         upperIds[m-1],\n         idx])\n      m -= 1\n    }\n    upperIds.length = m\n    upperIds.push(idx)\n  }\n}\n\nfunction findSplit(hull, edge) {\n  var d\n  if(hull.a[0] < edge.a[0]) {\n    d = orient(hull.a, hull.b, edge.a)\n  } else {\n    d = orient(edge.b, edge.a, hull.a)\n  }\n  if(d) { return d }\n  if(edge.b[0] < hull.b[0]) {\n    d = orient(hull.a, hull.b, edge.b)\n  } else {\n    d = orient(edge.b, edge.a, hull.b)\n  }\n  return d || hull.idx - edge.idx\n}\n\nfunction splitHulls(hulls, points, event) {\n  var splitIdx = bsearch.le(hulls, event, findSplit)\n  var hull = hulls[splitIdx]\n  var upperIds = hull.upperIds\n  var x = upperIds[upperIds.length-1]\n  hull.upperIds = [x]\n  hulls.splice(splitIdx+1, 0,\n    new PartialHull(event.a, event.b, event.idx, [x], upperIds))\n}\n\n\nfunction mergeHulls(hulls, points, event) {\n  //Swap pointers for merge search\n  var tmp = event.a\n  event.a = event.b\n  event.b = tmp\n  var mergeIdx = bsearch.eq(hulls, event, findSplit)\n  var upper = hulls[mergeIdx]\n  var lower = hulls[mergeIdx-1]\n  lower.upperIds = upper.upperIds\n  hulls.splice(mergeIdx, 1)\n}\n\n\nfunction monotoneTriangulate(points, edges) {\n\n  var numPoints = points.length\n  var numEdges = edges.length\n\n  var events = []\n\n  //Create point events\n  for(var i=0; i<numPoints; ++i) {\n    events.push(new Event(\n      points[i],\n      null,\n      EVENT_POINT,\n      i))\n  }\n\n  //Create edge events\n  for(var i=0; i<numEdges; ++i) {\n    var e = edges[i]\n    var a = points[e[0]]\n    var b = points[e[1]]\n    if(a[0] < b[0]) {\n      events.push(\n        new Event(a, b, EVENT_START, i),\n        new Event(b, a, EVENT_END, i))\n    } else if(a[0] > b[0]) {\n      events.push(\n        new Event(b, a, EVENT_START, i),\n        new Event(a, b, EVENT_END, i))\n    }\n  }\n\n  //Sort events\n  events.sort(compareEvent)\n\n  //Initialize hull\n  var minX = events[0].a[0] - (1 + Math.abs(events[0].a[0])) * Math.pow(2, -52)\n  var hull = [ new PartialHull([minX, 1], [minX, 0], -1, [], [], [], []) ]\n\n  //Process events in order\n  var cells = []\n  for(var i=0, numEvents=events.length; i<numEvents; ++i) {\n    var event = events[i]\n    var type = event.type\n    if(type === EVENT_POINT) {\n      addPoint(cells, hull, points, event.a, event.idx)\n    } else if(type === EVENT_START) {\n      splitHulls(hull, points, event)\n    } else {\n      mergeHulls(hull, points, event)\n    }\n  }\n\n  //Return triangulation\n  return cells\n}\n", "'use strict'\n\nvar bsearch = require('binary-search-bounds')\n\nmodule.exports = createTriangulation\n\nfunction Triangulation(stars, edges) {\n  this.stars = stars\n  this.edges = edges\n}\n\nvar proto = Triangulation.prototype\n\nfunction removePair(list, j, k) {\n  for(var i=1, n=list.length; i<n; i+=2) {\n    if(list[i-1] === j && list[i] === k) {\n      list[i-1] = list[n-2]\n      list[i] = list[n-1]\n      list.length = n - 2\n      return\n    }\n  }\n}\n\nproto.isConstraint = (function() {\n  var e = [0,0]\n  function compareLex(a, b) {\n    return a[0] - b[0] || a[1] - b[1]\n  }\n  return function(i, j) {\n    e[0] = Math.min(i,j)\n    e[1] = Math.max(i,j)\n    return bsearch.eq(this.edges, e, compareLex) >= 0\n  }\n})()\n\nproto.removeTriangle = function(i, j, k) {\n  var stars = this.stars\n  removePair(stars[i], j, k)\n  removePair(stars[j], k, i)\n  removePair(stars[k], i, j)\n}\n\nproto.addTriangle = function(i, j, k) {\n  var stars = this.stars\n  stars[i].push(j, k)\n  stars[j].push(k, i)\n  stars[k].push(i, j)\n}\n\nproto.opposite = function(j, i) {\n  var list = this.stars[i]\n  for(var k=1, n=list.length; k<n; k+=2) {\n    if(list[k] === j) {\n      return list[k-1]\n    }\n  }\n  return -1\n}\n\nproto.flip = function(i, j) {\n  var a = this.opposite(i, j)\n  var b = this.opposite(j, i)\n  this.removeTriangle(i, j, a)\n  this.removeTriangle(j, i, b)\n  this.addTriangle(i, b, a)\n  this.addTriangle(j, a, b)\n}\n\nproto.edges = function() {\n  var stars = this.stars\n  var result = []\n  for(var i=0, n=stars.length; i<n; ++i) {\n    var list = stars[i]\n    for(var j=0, m=list.length; j<m; j+=2) {\n      result.push([list[j], list[j+1]])\n    }\n  }\n  return result\n}\n\nproto.cells = function() {\n  var stars = this.stars\n  var result = []\n  for(var i=0, n=stars.length; i<n; ++i) {\n    var list = stars[i]\n    for(var j=0, m=list.length; j<m; j+=2) {\n      var s = list[j]\n      var t = list[j+1]\n      if(i < Math.min(s, t)) {\n        result.push([i, s, t])\n      }\n    }\n  }\n  return result\n}\n\nfunction createTriangulation(numVerts, edges) {\n  var stars = new Array(numVerts)\n  for(var i=0; i<numVerts; ++i) {\n    stars[i] = []\n  }\n  return new Triangulation(stars, edges)\n}\n", "\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar robustSum = require(\"robust-sum\")\nvar robustDiff = require(\"robust-subtract\")\nvar robustScale = require(\"robust-scale\")\n\nvar NUM_EXPAND = 6\n\nfunction orientation(n) {\n  var fn =\n    n === 3 ? inSphere3 :\n    n === 4 ? inSphere4 :\n    n === 5 ? inSphere5 : inSphere6;\n\n  return fn(robustSum, robustDiff, twoProduct, robustScale)\n}\n\nfunction inSphere0() { return 0 }\nfunction inSphere1() { return 0 }\nfunction inSphere2() { return 0 }\n\nfunction inSphere3(sum, diff, prod, scale) {\n  function exactInSphere3(m0, m1, m2) {\n    var w0 = prod(m0[0], m0[0])\n    var w0m1 = scale(w0, m1[0])\n    var w0m2 = scale(w0, m2[0])\n    var w1 = prod(m1[0], m1[0])\n    var w1m0 = scale(w1, m0[0])\n    var w1m2 = scale(w1, m2[0])\n    var w2 = prod(m2[0], m2[0])\n    var w2m0 = scale(w2, m0[0])\n    var w2m1 = scale(w2, m1[0])\n    var p = sum(diff(w2m1, w1m2), diff(w1m0, w0m1))\n    var n = diff(w2m0, w0m2)\n    var d = diff(p, n)\n    return d[d.length - 1]\n  }\n  return exactInSphere3\n}\n\nfunction inSphere4(sum, diff, prod, scale) {\n  function exactInSphere4(m0, m1, m2, m3) {\n    var w0 = sum(prod(m0[0], m0[0]), prod(m0[1], m0[1]))\n    var w0m1 = scale(w0, m1[0])\n    var w0m2 = scale(w0, m2[0])\n    var w0m3 = scale(w0, m3[0])\n    var w1 = sum(prod(m1[0], m1[0]), prod(m1[1], m1[1]))\n    var w1m0 = scale(w1, m0[0])\n    var w1m2 = scale(w1, m2[0])\n    var w1m3 = scale(w1, m3[0])\n    var w2 = sum(prod(m2[0], m2[0]), prod(m2[1], m2[1]))\n    var w2m0 = scale(w2, m0[0])\n    var w2m1 = scale(w2, m1[0])\n    var w2m3 = scale(w2, m3[0])\n    var w3 = sum(prod(m3[0], m3[0]), prod(m3[1], m3[1]))\n    var w3m0 = scale(w3, m0[0])\n    var w3m1 = scale(w3, m1[0])\n    var w3m2 = scale(w3, m2[0])\n    var p = sum(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))))\n    var n = sum(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))))\n    var d = diff(p, n)\n    return d[d.length - 1]\n  }\n  return exactInSphere4\n}\n\n\nfunction inSphere5(sum, diff, prod, scale) {\n  function exactInSphere5(m0, m1, m2, m3, m4) {\n    var w0 = sum(prod(m0[0], m0[0]), sum(prod(m0[1], m0[1]), prod(m0[2], m0[2])))\n    var w0m1 = scale(w0, m1[0])\n    var w0m2 = scale(w0, m2[0])\n    var w0m3 = scale(w0, m3[0])\n    var w0m4 = scale(w0, m4[0])\n    var w1 = sum(prod(m1[0], m1[0]), sum(prod(m1[1], m1[1]), prod(m1[2], m1[2])))\n    var w1m0 = scale(w1, m0[0])\n    var w1m2 = scale(w1, m2[0])\n    var w1m3 = scale(w1, m3[0])\n    var w1m4 = scale(w1, m4[0])\n    var w2 = sum(prod(m2[0], m2[0]), sum(prod(m2[1], m2[1]), prod(m2[2], m2[2])))\n    var w2m0 = scale(w2, m0[0])\n    var w2m1 = scale(w2, m1[0])\n    var w2m3 = scale(w2, m3[0])\n    var w2m4 = scale(w2, m4[0])\n    var w3 = sum(prod(m3[0], m3[0]), sum(prod(m3[1], m3[1]), prod(m3[2], m3[2])))\n    var w3m0 = scale(w3, m0[0])\n    var w3m1 = scale(w3, m1[0])\n    var w3m2 = scale(w3, m2[0])\n    var w3m4 = scale(w3, m4[0])\n    var w4 = sum(prod(m4[0], m4[0]), sum(prod(m4[1], m4[1]), prod(m4[2], m4[2])))\n    var w4m0 = scale(w4, m0[0])\n    var w4m1 = scale(w4, m1[0])\n    var w4m2 = scale(w4, m2[0])\n    var w4m3 = scale(w4, m3[0])\n    var p = sum(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m1[2]), sum(scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m2[2]), scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m3[2]))), sum(scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m4[2]), sum(scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m1[2])))), sum(sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m3[2]), sum(scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m4[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), m0[2]))), sum(scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m1[2]), sum(scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m3[2])))))\n    var n = sum(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m4[2]))), sum(sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m0[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m4[2]))))\n    var d = diff(p, n)\n    return d[d.length - 1]\n  }\n\n    return exactInSphere5\n}\n\nfunction inSphere6(sum, diff, prod, scale) {\n  function exactInSphere6(m0, m1, m2, m3, m4, m5) {\n    var w0 = sum(sum(prod(m0[0], m0[0]), prod(m0[1], m0[1])), sum(prod(m0[2], m0[2]), prod(m0[3], m0[3])))\n    var w0m1 = scale(w0, m1[0])\n    var w0m2 = scale(w0, m2[0])\n    var w0m3 = scale(w0, m3[0])\n    var w0m4 = scale(w0, m4[0])\n    var w0m5 = scale(w0, m5[0])\n    var w1 = sum(sum(prod(m1[0], m1[0]), prod(m1[1], m1[1])), sum(prod(m1[2], m1[2]), prod(m1[3], m1[3])))\n    var w1m0 = scale(w1, m0[0])\n    var w1m2 = scale(w1, m2[0])\n    var w1m3 = scale(w1, m3[0])\n    var w1m4 = scale(w1, m4[0])\n    var w1m5 = scale(w1, m5[0])\n    var w2 = sum(sum(prod(m2[0], m2[0]), prod(m2[1], m2[1])), sum(prod(m2[2], m2[2]), prod(m2[3], m2[3])))\n    var w2m0 = scale(w2, m0[0])\n    var w2m1 = scale(w2, m1[0])\n    var w2m3 = scale(w2, m3[0])\n    var w2m4 = scale(w2, m4[0])\n    var w2m5 = scale(w2, m5[0])\n    var w3 = sum(sum(prod(m3[0], m3[0]), prod(m3[1], m3[1])), sum(prod(m3[2], m3[2]), prod(m3[3], m3[3])))\n    var w3m0 = scale(w3, m0[0])\n    var w3m1 = scale(w3, m1[0])\n    var w3m2 = scale(w3, m2[0])\n    var w3m4 = scale(w3, m4[0])\n    var w3m5 = scale(w3, m5[0])\n    var w4 = sum(sum(prod(m4[0], m4[0]), prod(m4[1], m4[1])), sum(prod(m4[2], m4[2]), prod(m4[3], m4[3])))\n    var w4m0 = scale(w4, m0[0])\n    var w4m1 = scale(w4, m1[0])\n    var w4m2 = scale(w4, m2[0])\n    var w4m3 = scale(w4, m3[0])\n    var w4m5 = scale(w4, m5[0])\n    var w5 = sum(sum(prod(m5[0], m5[0]), prod(m5[1], m5[1])), sum(prod(m5[2], m5[2]), prod(m5[3], m5[3])))\n    var w5m0 = scale(w5, m0[0])\n    var w5m1 = scale(w5, m1[0])\n    var w5m2 = scale(w5, m2[0])\n    var w5m3 = scale(w5, m3[0])\n    var w5m4 = scale(w5, m4[0])\n    var p = sum(sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m2[2]), scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), -m5[2]))), m1[3]), sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m1[2]), scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m5[2]))), -m2[3]), scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), m1[2]), scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m4[2]), scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), -m5[2]))), m3[3]))), sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m1[2]), scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m5[2]))), -m4[3]), scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m1[2]), scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m4[2]))), m5[3])), sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m1[2]), scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m5[2]))), m0[3]), scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m5[2]))), -m1[3])))), sum(sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m4[2]), scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), -m5[2]))), m3[3]), scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), m0[2]), scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m3[2]), scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m5[2]))), -m4[3])), sum(scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m3[2]), scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m4[2]))), m5[3]), scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m1[2]), scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m5[2]))), m0[3]))), sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m0[2]), scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m5[2]))), -m1[3]), scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m3[1]), scale(diff(w3m1, w1m3), m5[1]))), m0[2]), scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m3[2]), scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m5[2]))), m2[3])), sum(scale(sum(sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m0[2]), scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m5[2]))), -m3[3]), scale(sum(sum(scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), m0[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m1[2])), sum(scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m3[2]))), m5[3])))))\n    var n = sum(sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m2[2]), scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), -m5[2]))), m0[3]), sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m3[1]), sum(scale(diff(w5m3, w3m5), -m4[1]), scale(diff(w4m3, w3m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m3[2])), sum(scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), m4[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m5[2]))), -m2[3]), scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), m4[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m5[2]))), m3[3]))), sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m3, w3m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m3[1]), scale(diff(w3m2, w2m3), m5[1]))), m0[2]), scale(sum(scale(diff(w5m3, w3m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m3[1]), scale(diff(w3m0, w0m3), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m5[2]))), -m4[3]), scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m4[2]))), m5[3])), sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), m1[2]), scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m4[2]), scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), -m5[2]))), m0[3]), scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m2[1]), sum(scale(diff(w5m2, w2m5), -m4[1]), scale(diff(w4m2, w2m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m2[2])), sum(scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), m4[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m5[2]))), -m1[3])))), sum(sum(sum(scale(sum(sum(scale(sum(scale(diff(w5m4, w4m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m4[1]), scale(diff(w4m1, w1m4), m5[1]))), m0[2]), scale(sum(scale(diff(w5m4, w4m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m4[1]), scale(diff(w4m0, w0m4), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m4[2]), scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), -m5[2]))), m2[3]), scale(sum(sum(scale(sum(scale(diff(w5m2, w2m5), m1[1]), sum(scale(diff(w5m1, w1m5), -m2[1]), scale(diff(w2m1, w1m2), m5[1]))), m0[2]), scale(sum(scale(diff(w5m2, w2m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m2[1]), scale(diff(w2m0, w0m2), m5[1]))), -m1[2])), sum(scale(sum(scale(diff(w5m1, w1m5), m0[1]), sum(scale(diff(w5m0, w0m5), -m1[1]), scale(diff(w1m0, w0m1), m5[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m5[2]))), -m4[3])), sum(scale(sum(sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m0[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m4[2]))), m5[3]), scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m1[2]), scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), -m4[2]))), m0[3]))), sum(sum(scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m2[1]), sum(scale(diff(w4m2, w2m4), -m3[1]), scale(diff(w3m2, w2m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m2[2])), sum(scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), m3[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m4[2]))), -m1[3]), scale(sum(sum(scale(sum(scale(diff(w4m3, w3m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m3[1]), scale(diff(w3m1, w1m3), m4[1]))), m0[2]), scale(sum(scale(diff(w4m3, w3m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m3[1]), scale(diff(w3m0, w0m3), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m3[2]), scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), -m4[2]))), m2[3])), sum(scale(sum(sum(scale(sum(scale(diff(w4m2, w2m4), m1[1]), sum(scale(diff(w4m1, w1m4), -m2[1]), scale(diff(w2m1, w1m2), m4[1]))), m0[2]), scale(sum(scale(diff(w4m2, w2m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m2[1]), scale(diff(w2m0, w0m2), m4[1]))), -m1[2])), sum(scale(sum(scale(diff(w4m1, w1m4), m0[1]), sum(scale(diff(w4m0, w0m4), -m1[1]), scale(diff(w1m0, w0m1), m4[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m4[2]))), -m3[3]), scale(sum(sum(scale(sum(scale(diff(w3m2, w2m3), m1[1]), sum(scale(diff(w3m1, w1m3), -m2[1]), scale(diff(w2m1, w1m2), m3[1]))), m0[2]), scale(sum(scale(diff(w3m2, w2m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m2[1]), scale(diff(w2m0, w0m2), m3[1]))), -m1[2])), sum(scale(sum(scale(diff(w3m1, w1m3), m0[1]), sum(scale(diff(w3m0, w0m3), -m1[1]), scale(diff(w1m0, w0m1), m3[1]))), m2[2]), scale(sum(scale(diff(w2m1, w1m2), m0[1]), sum(scale(diff(w2m0, w0m2), -m1[1]), scale(diff(w1m0, w0m1), m2[1]))), -m3[2]))), m4[3])))))\n    var d = diff(p, n)\n    return d[d.length - 1]\n  }\n  return exactInSphere6\n}\n\nvar CACHED = [\n  inSphere0,\n  inSphere1,\n  inSphere2\n]\n\nfunction slowInSphere(args) {\n  var proc = CACHED[args.length]\n  if(!proc) {\n    proc = CACHED[args.length] = orientation(args.length)\n  }\n  return proc.apply(undefined, args)\n}\n\nfunction proc(slow, o0, o1, o2, o3, o4, o5, o6) {\n  function testInSphere(a0, a1, a2, a3, a4, a5) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return 0;\n      case 2:\n        return o2(a0, a1)\n      case 3:\n        return o3(a0, a1, a2)\n      case 4:\n        return o4(a0, a1, a2, a3)\n      case 5:\n        return o5(a0, a1, a2, a3, a4)\n      case 6:\n        return o6(a0, a1, a2, a3, a4, a5)\n    }\n\n    var s = new Array(arguments.length)\n    for (var i = 0; i < arguments.length; ++i) {\n      s[i] = arguments[i]\n    }\n    return slow(s)\n  }\n  return testInSphere\n}\n\nfunction generateInSphereTest() {\n  while(CACHED.length <= NUM_EXPAND) {\n    CACHED.push(orientation(CACHED.length))\n  }\n\n  module.exports = proc.apply(undefined, [slowInSphere].concat(CACHED))\n  for(var i=0; i<=NUM_EXPAND; ++i) {\n    module.exports[i] = CACHED[i]\n  }\n}\n\ngenerateInSphereTest()", "'use strict'\n\nvar inCircle = require('robust-in-sphere')[4]\nvar bsearch = require('binary-search-bounds')\n\nmodule.exports = delaunayRefine\n\nfunction testFlip(points, triangulation, stack, a, b, x) {\n  var y = triangulation.opposite(a, b)\n\n  //Test boundary edge\n  if(y < 0) {\n    return\n  }\n\n  //Swap edge if order flipped\n  if(b < a) {\n    var tmp = a\n    a = b\n    b = tmp\n    tmp = x\n    x = y\n    y = tmp\n  }\n\n  //Test if edge is constrained\n  if(triangulation.isConstraint(a, b)) {\n    return\n  }\n\n  //Test if edge is delaunay\n  if(inCircle(points[a], points[b], points[x], points[y]) < 0) {\n    stack.push(a, b)\n  }\n}\n\n//Assume edges are sorted lexicographically\nfunction delaunayRefine(points, triangulation) {\n  var stack = []\n\n  var numPoints = points.length\n  var stars = triangulation.stars\n  for(var a=0; a<numPoints; ++a) {\n    var star = stars[a]\n    for(var j=1; j<star.length; j+=2) {\n      var b = star[j]\n\n      //If order is not consistent, then skip edge\n      if(b < a) {\n        continue\n      }\n\n      //Check if edge is constrained\n      if(triangulation.isConstraint(a, b)) {\n        continue\n      }\n\n      //Find opposite edge\n      var x = star[j-1], y = -1\n      for(var k=1; k<star.length; k+=2) {\n        if(star[k-1] === b) {\n          y = star[k]\n          break\n        }\n      }\n\n      //If this is a boundary edge, don't flip it\n      if(y < 0) {\n        continue\n      }\n\n      //If edge is in circle, flip it\n      if(inCircle(points[a], points[b], points[x], points[y]) < 0) {\n        stack.push(a, b)\n      }\n    }\n  }\n\n  while(stack.length > 0) {\n    var b = stack.pop()\n    var a = stack.pop()\n\n    //Find opposite pairs\n    var x = -1, y = -1\n    var star = stars[a]\n    for(var i=1; i<star.length; i+=2) {\n      var s = star[i-1]\n      var t = star[i]\n      if(s === b) {\n        y = t\n      } else if(t === b) {\n        x = s\n      }\n    }\n\n    //If x/y are both valid then skip edge\n    if(x < 0 || y < 0) {\n      continue\n    }\n\n    //If edge is now delaunay, then don't flip it\n    if(inCircle(points[a], points[b], points[x], points[y]) >= 0) {\n      continue\n    }\n\n    //Flip the edge\n    triangulation.flip(a, b)\n\n    //Test flipping neighboring edges\n    testFlip(points, triangulation, stack, x, a, y)\n    testFlip(points, triangulation, stack, a, y, x)\n    testFlip(points, triangulation, stack, y, b, x)\n    testFlip(points, triangulation, stack, b, x, y)\n  }\n}\n", "'use strict'\n\nvar bsearch = require('binary-search-bounds')\n\nmodule.exports = classifyFaces\n\nfunction FaceIndex(cells, neighbor, constraint, flags, active, next, boundary) {\n  this.cells       = cells\n  this.neighbor    = neighbor\n  this.flags       = flags\n  this.constraint  = constraint\n  this.active      = active\n  this.next        = next\n  this.boundary    = boundary\n}\n\nvar proto = FaceIndex.prototype\n\nfunction compareCell(a, b) {\n  return a[0] - b[0] ||\n         a[1] - b[1] ||\n         a[2] - b[2]\n}\n\nproto.locate = (function() {\n  var key = [0,0,0]\n  return function(a, b, c) {\n    var x = a, y = b, z = c\n    if(b < c) {\n      if(b < a) {\n        x = b\n        y = c\n        z = a\n      }\n    } else if(c < a) {\n      x = c\n      y = a\n      z = b\n    }\n    if(x < 0) {\n      return -1\n    }\n    key[0] = x\n    key[1] = y\n    key[2] = z\n    return bsearch.eq(this.cells, key, compareCell)\n  }\n})()\n\nfunction indexCells(triangulation, infinity) {\n  //First get cells and canonicalize\n  var cells = triangulation.cells()\n  var nc = cells.length\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    var x = c[0], y = c[1], z = c[2]\n    if(y < z) {\n      if(y < x) {\n        c[0] = y\n        c[1] = z\n        c[2] = x\n      }\n    } else if(z < x) {\n      c[0] = z\n      c[1] = x\n      c[2] = y\n    }\n  }\n  cells.sort(compareCell)\n\n  //Initialize flag array\n  var flags = new Array(nc)\n  for(var i=0; i<flags.length; ++i) {\n    flags[i] = 0\n  }\n\n  //Build neighbor index, initialize queues\n  var active = []\n  var next   = []\n  var neighbor = new Array(3*nc)\n  var constraint = new Array(3*nc)\n  var boundary = null\n  if(infinity) {\n    boundary = []\n  }\n  var index = new FaceIndex(\n    cells,\n    neighbor,\n    constraint,\n    flags,\n    active,\n    next,\n    boundary)\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    for(var j=0; j<3; ++j) {\n      var x = c[j], y = c[(j+1)%3]\n      var a = neighbor[3*i+j] = index.locate(y, x, triangulation.opposite(y, x))\n      var b = constraint[3*i+j] = triangulation.isConstraint(x, y)\n      if(a < 0) {\n        if(b) {\n          next.push(i)\n        } else {\n          active.push(i)\n          flags[i] = 1\n        }\n        if(infinity) {\n          boundary.push([y, x, -1])\n        }\n      }\n    }\n  }\n  return index\n}\n\nfunction filterCells(cells, flags, target) {\n  var ptr = 0\n  for(var i=0; i<cells.length; ++i) {\n    if(flags[i] === target) {\n      cells[ptr++] = cells[i]\n    }\n  }\n  cells.length = ptr\n  return cells\n}\n\nfunction classifyFaces(triangulation, target, infinity) {\n  var index = indexCells(triangulation, infinity)\n\n  if(target === 0) {\n    if(infinity) {\n      return index.cells.concat(index.boundary)\n    } else {\n      return index.cells\n    }\n  }\n\n  var side = 1\n  var active = index.active\n  var next = index.next\n  var flags = index.flags\n  var cells = index.cells\n  var constraint = index.constraint\n  var neighbor = index.neighbor\n\n  while(active.length > 0 || next.length > 0) {\n    while(active.length > 0) {\n      var t = active.pop()\n      if(flags[t] === -side) {\n        continue\n      }\n      flags[t] = side\n      var c = cells[t]\n      for(var j=0; j<3; ++j) {\n        var f = neighbor[3*t+j]\n        if(f >= 0 && flags[f] === 0) {\n          if(constraint[3*t+j]) {\n            next.push(f)\n          } else {\n            active.push(f)\n            flags[f] = side\n          }\n        }\n      }\n    }\n\n    //Swap arrays and loop\n    var tmp = next\n    next = active\n    active = tmp\n    next.length = 0\n    side = -side\n  }\n\n  var result = filterCells(cells, flags, target)\n  if(infinity) {\n    return result.concat(index.boundary)\n  }\n  return result\n}\n", "'use strict'\n\nvar monotoneTriangulate = require('./lib/monotone')\nvar makeIndex = require('./lib/triangulation')\nvar delaunayFlip = require('./lib/delaunay')\nvar filterTriangulation = require('./lib/filter')\n\nmodule.exports = cdt2d\n\nfunction canonicalizeEdge(e) {\n  return [Math.min(e[0], e[1]), Math.max(e[0], e[1])]\n}\n\nfunction compareEdge(a, b) {\n  return a[0]-b[0] || a[1]-b[1]\n}\n\nfunction canonicalizeEdges(edges) {\n  return edges.map(canonicalizeEdge).sort(compareEdge)\n}\n\nfunction getDefault(options, property, dflt) {\n  if(property in options) {\n    return options[property]\n  }\n  return dflt\n}\n\nfunction cdt2d(points, edges, options) {\n\n  if(!Array.isArray(edges)) {\n    options = edges || {}\n    edges = []\n  } else {\n    options = options || {}\n    edges = edges || []\n  }\n\n  //Parse out options\n  var delaunay = !!getDefault(options, 'delaunay', true)\n  var interior = !!getDefault(options, 'interior', true)\n  var exterior = !!getDefault(options, 'exterior', true)\n  var infinity = !!getDefault(options, 'infinity', false)\n\n  //Handle trivial case\n  if((!interior && !exterior) || points.length === 0) {\n    return []\n  }\n\n  //Construct initial triangulation\n  var cells = monotoneTriangulate(points, edges)\n\n  //If delaunay refinement needed, then improve quality by edge flipping\n  if(delaunay || interior !== exterior || infinity) {\n\n    //Index all of the cells to support fast neighborhood queries\n    var triangulation = makeIndex(points.length, canonicalizeEdges(edges))\n    for(var i=0; i<cells.length; ++i) {\n      var f = cells[i]\n      triangulation.addTriangle(f[0], f[1], f[2])\n    }\n\n    //Run edge flipping\n    if(delaunay) {\n      delaunayFlip(points, triangulation)\n    }\n\n    //Filter points\n    if(!exterior) {\n      return filterTriangulation(triangulation, -1)\n    } else if(!interior) {\n      return filterTriangulation(triangulation,  1, infinity)\n    } else if(infinity) {\n      return filterTriangulation(triangulation, 0, infinity)\n    } else {\n      return triangulation.cells()\n    }\n    \n  } else {\n    return cells\n  }\n}\n", "export default require(\"./node_modules/cdt2d/cdt2d.js\");"],
  "mappings": "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AE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AAC99E,YAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,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,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9+C,YAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IA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AG,EAAE;AAC1B,YAAI,OAAO,MAAM,IAAI,GAAG,EAAE;AAC1B,YAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9nP,YAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,MAAM,KAAK,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,GAA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",
  "names": ["orientation3Exact", "orientation4Exact", "proc", "proc"]
}
